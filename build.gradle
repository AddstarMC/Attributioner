plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'au.com.addstar'
version = '1.0.0'

repositories {
    mavenCentral()

    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }

    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        name = "enginehub"
        url = "https://maven.enginehub.org/repo/"
    }

    maven {
        name = "jitpack"
        url = "https://jitpack.io/"
    }
}

dependencies {
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT")

    // WorldEdit and WorldGuard
    compileOnly("com.sk89q.worldedit:worldedit-bukkit:7.3.14")
    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.14")

}

tasks {
    runServer {
        minecraftVersion("1.21")
    }

    // Customize jar file name with version
    jar {
        archiveBaseName.set("Attributioner")
        archiveVersion.set(version)
        archiveClassifier.set("") // No "-plain" suffix
    }

    // Filter plugin.yml and inject version
    processResources {
        def props = [version: version]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching('plugin.yml') {
            expand props
        }
    }
}

// Java compatibility & toolchain
def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}